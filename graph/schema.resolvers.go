package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"fmt"

	"github.com/ghsable/graphql-playground.go/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUser) (*model.User, error) {
	db := ConnectDB()
	user := &model.User{
		Name:     input.Name,
		Email:    input.Email,
		IsActive: input.IsActive,
	}
	if result := db.Create(user); result.Error != nil {
		return nil, result.Error
	} else {
		fmt.Println("inserted:", result.RowsAffected)
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	db := ConnectDB()
	user := &model.User{
		ID: input.ID,
	}
	if result := db.First(user); result.Error != nil {
		return nil, result.Error
	}
	user.Name = input.Name
	user.Email = input.Email
	user.IsActive = input.IsActive
	if result := db.Save(user); result.Error != nil {
		return nil, result.Error
	}
	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *int, name *string, email *string, isActive *bool) ([]*model.User, error) {
	db := ConnectDB()
	query := db.Model(&model.User{})
	var users []*model.User
	if id != nil {
		query = query.Where("id = ?", id)
	}
	if name != nil {
		query = query.Where("name = ?", name)
	}
	if email != nil {
		query = query.Where("email = ?", email)
	}
	if isActive != nil {
		if *isActive {
			query = query.Where("is_active IS TRUE")
		} else {
			query = query.Where("is_active IS FALSE OR is_active IS NULL")
		}
	}
	if err := query.Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
